<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[炫酷的before和after]]></title>
      <url>http://babymaychen.github.io/2016/06/23/css-%E7%82%AB%E9%85%B7%E7%9A%84before%E5%92%8Cafter/</url>
      <content type="html"><![CDATA[<blockquote>
<p>css有两个不常用的伪元素，:before和:after，但是这两个元素却能在我们的页面中带来许多做不出来的效果，比如小icon啊、动态的效果啊，阴影啊等等，只有你想不到的。在css3的时候出现了::双冒号，用来区别:hover之类的伪类，但是为了支持IE8浏览器，所以还是用单冒号:比较保险。</p>
</blockquote>
<h4 id="他们的作用"><a href="#他们的作用" class="headerlink" title="他们的作用"></a>他们的作用</h4><p>伪元素，他们不是真是存在DOM文档中的，他们虽然在页面中能看见，但是却在源代码中找不到，他们是会在内容元素的前后额外插入的元素。</p>
<h5 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>博主好帅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">"↓"</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#D63A3A</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">"##"</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#D63A3A</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p class="before_after">博主好帅</p>

<h5 id="旋转小火轮"><a href="#旋转小火轮" class="headerlink" title="旋转小火轮"></a>旋转小火轮</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.circle</span> &#123;</span><br><span class="line"> 	<span class="attribute">position</span>: relative;</span><br><span class="line"> 	<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line"> 	<span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line"> 	<span class="attribute">height</span>: <span class="number">190px</span>;</span><br><span class="line"> 	<span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"> 	<span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"/uploads/mayEnIcon.png"</span>);</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">50%</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.circle</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">     <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.circle</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"> <span class="selector-class">.circle</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> 	<span class="attribute">box-shadow</span>: inset <span class="number">0.86em</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(255, 0, 0, 0.5),</span><br><span class="line"> 				inset <span class="number">0</span> <span class="number">0.86em</span> <span class="number">0</span> <span class="built_in">rgba</span>(252, 150, 0, 0.5),</span><br><span class="line"> 				inset -<span class="number">0.86em</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 255, 0, 0.5),	</span><br><span class="line"> 				inset <span class="number">0</span> -<span class="number">0.86em</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 150, 255, 0.5);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.circle</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.circle</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">width</span>: inherit;</span><br><span class="line">     <span class="attribute">height</span>: inherit;</span><br><span class="line">     <span class="attribute">box-shadow</span>: inset <span class="number">9.6em</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(30, 140, 209, 0.2), </span><br><span class="line">		      inset <span class="number">0</span> <span class="number">9.6em</span> <span class="number">0</span> <span class="built_in">rgba</span>(30, 140, 209, 0.2), </span><br><span class="line">		      inset -<span class="number">9.6em</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(30, 140, 209, 0.2), </span><br><span class="line">		      inset <span class="number">0</span> -<span class="number">9.6em</span> <span class="number">0</span> <span class="built_in">rgba</span>(30, 140, 209, 0.2);</span><br><span class="line">     <span class="attribute">-webkit-transition</span>: box-shadow <span class="number">0.75s</span>;</span><br><span class="line">     <span class="attribute">-moz-transition</span>: box-shadow <span class="number">0.75s</span>;</span><br><span class="line">     <span class="attribute">-ms-transition</span>: box-shadow <span class="number">0.75s</span>;</span><br><span class="line">     <span class="attribute">transition</span>: box-shadow <span class="number">0.75s</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<div class="circle"></div>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html5 canvas]]></title>
      <url>http://babymaychen.github.io/2016/06/22/html5-canvas/</url>
      <content type="html"><![CDATA[<blockquote>
<p>html5里新增了一些标签，为啥单独把canvas拿出来讲呢，因为它可以实现一些很酷的动画，让我们一起从零开始学习吧。</p>
</blockquote>
<h4 id="canvas-元素"><a href="#canvas-元素" class="headerlink" title="canvas 元素"></a>canvas 元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它只有两个属性，width和height，可选项，默认是300px*150px。</p>
<p>由于有些较老的浏览器不支持canvas，我们会在canvas内部写上你想让不支持的浏览器里显示的内容。如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">	current stock price: $3.15 +0.15</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong> 注意：结束标签<code>&lt;/canvas&gt;</code>不可省略 </strong></p>
<h4 id="渲染上下文"><a href="#渲染上下文" class="headerlink" title="渲染上下文"></a>渲染上下文</h4><p><code>&lt;canvas&gt;</code>元素创造了一个画布它公开了一个或多个渲染上下文，其可以用来绘制和处理要展示的内容。这里主要介绍2D图像，通过使用getContext()方法获取渲染上下文和它的绘画功能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br></pre></td></tr></table></figure>
<p>用脚本检测浏览器支持性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canvas.getContext)&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  <span class="comment">// drawing code here</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// canvas-unsupported code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="栅格"><a href="#栅格" class="headerlink" title="栅格"></a>栅格</h4><p>canvas画布的起点是网格的左上角，坐标(x,y)，分别表示距离y轴和x轴的距离，如下图所示。</p>
<p><img src="/uploads/Canvas_default_grid.png" alt="Canvas_default_grid"></p>
<h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><ul>
<li>fillRect(x, y, width, height)：绘制一个填充的矩形</li>
<li>strokeRect(x, y, width, height)：绘制一个矩形的边框</li>
<li><p>clearRect(x, y, width, height)：清除指定矩形区域，让清除部分完全透明</p>
<p>  参数：<br>  x：矩形起始点的 x 轴坐标。<br>  y：矩形起始点的 y 轴坐标。<br>  width：矩形的宽度。<br>  height：矩形的高度。</p>
</li>
</ul>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span>support<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">	<span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">	ctx.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">	ctx.fillRect(<span class="number">30</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">	ctx.clearRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line">	ctx.strokeRect(<span class="number">60</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/canvas-1.png" alt="canvas-1"></p>
<h4 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h4><ul>
<li>beginPath()：新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径</li>
<li>closePath()：闭合路径之后图形绘制命令又重新指向到上下文中(不是必须的)</li>
<li>stroke()：通过线条来绘制图形轮廓</li>
<li>fill()：通过填充路径的内容区域生成实心的图形</li>
</ul>
<p><strong> 注意：当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。 </strong></p>
<ul>
<li>moveTo(x, y)：笔触，一个画笔在一个画布的哪个位置落笔。</li>
<li>lineTo(x, y)：笔触后，定义停止的位置。<br>  参数：<br>  x：x 轴坐标。<br>  y：y 轴坐标。</li>
<li>arc(x, y, radius, startAngle, endAngle, anticlockwise)：绘制圆或圆弧之类的路径<br>  参数：<br>  x：圆心位置 x 轴坐标。<br>  y：圆心位置 y 轴坐标。<br>  radius：圆的半径。<br>  startAngle：起始角度。<br>  endAngle：终点角度。<br>  anticlockwise：可选项，默认是顺时针，如果填写true，则为逆时针。</li>
<li>arcTo((x1, y1, x2, y2, radius)：根据控制点和半径绘制圆弧路径的方法，使用直线连接前一个点。<br>  参数：<br>  x1：第一个控制点的 x 轴坐标。<br>  y1：第一个控制点的 y 轴坐标。<br>  x2：第二个控制点的 x 轴坐标。<br>  y2：第二个控制点的 y 轴坐标。<br>  radius：半径。<br><strong> 注意：两个控制点连接的线及延长线与所画的圆相切 </strong></li>
<li>quadraticCurveTo(cp1x, cp1y, x, y)：二次贝塞尔曲线<br>  参数：<br>  cp1x：控制点的 x 轴坐标。<br>  cp1y：控制点的 y 轴坐标。<br>  x：终点的 x 轴坐标。<br>  y：终点的 y 轴坐标。<br><strong> 注意：控制点与起点和终点相连的两条线及延长线与所画的圆相切 </strong></li>
<li>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)：三次贝塞尔曲线<br>  参数：<br>  cp1x：第一个控制点的 x 轴坐标。<br>  cp1y：第一个控制点的 y 轴坐标。<br>  cp2x：第二个控制点的 x 轴坐标。<br>  cp2y：第二个控制点的 y 轴坐标。<br>  x：终点的 x 轴坐标。<br>  y：终点的 y 轴坐标。<br><strong> 注意：第一个控制点与起点相连，第二个控制点与终点相连的两条线及延长线与所画的圆相切 </strong></li>
</ul>
<h4 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h4><ul>
<li>fillStyle = color：设置图形的填充颜色。</li>
<li>strokeStyle = color：设置图形轮廓颜色。</li>
</ul>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span>support<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">	<span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">	      ctx.fillStyle = <span class="string">'rgb('</span> + <span class="built_in">Math</span>.floor(<span class="number">255</span><span class="number">-42.5</span>*i) + <span class="string">','</span> + </span><br><span class="line">	                       <span class="built_in">Math</span>.floor(<span class="number">42.5</span>*j) + <span class="string">',0)'</span>;</span><br><span class="line">	      ctx.fillRect(j*<span class="number">25</span>,i*<span class="number">25</span>,<span class="number">25</span>,<span class="number">25</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/canvas-2.png" alt="canvas-2"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span>support<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">	<span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">	        ctx.strokeStyle = <span class="string">'rgb(0,'</span> + <span class="built_in">Math</span>.floor(<span class="number">255</span><span class="number">-42.5</span>*i) + <span class="string">','</span> +</span><br><span class="line">	                           <span class="built_in">Math</span>.floor(<span class="number">255</span><span class="number">-42.5</span>*j) + <span class="string">')'</span>;</span><br><span class="line">	      	ctx.beginPath();</span><br><span class="line">	      	ctx.arc(<span class="number">12.5</span>+j*<span class="number">25</span>,<span class="number">12.5</span>+i*<span class="number">25</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">	      	ctx.stroke();</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/canvas-3.png" alt="canvas-3"></p>
<h4 id="颜色渐变"><a href="#颜色渐变" class="headerlink" title="颜色渐变"></a>颜色渐变</h4><ul>
<li>createLinearGradient(x0, y0, x1, y1)：方法创建一个沿参数坐标指定的直线的渐变<br>  参数：<br>  x0：起点的 x 轴坐标。<br>  y0：起点的 y 轴坐标。<br>  x1：终点的 x 轴坐标。<br>  y1：终点的 y 轴坐标。</li>
<li>createRadialGradient(x0, y0, r0, x1, y1, r1)：两个圆的坐标，绘制放射性渐变的方法。<br>  参数：<br>  x0：开始圆形的 x 轴坐标。<br>  y0：开始圆形的 y 轴坐标。<br>  r0：开始圆形的半径。<br>  x1：结束圆形的 x 轴坐标。<br>  y1：结束圆形的 y 轴坐标。<br>  r1：结束圆形的半径。</li>
</ul>
<h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul>
<li>fillText(text, x, y [, maxWidth])：在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的。</li>
<li>strokeText(text, x, y [, maxWidth])：在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的。</li>
</ul>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span>support<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">	<span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">	ctx.shadowOffsetX = <span class="number">4</span>;</span><br><span class="line">	ctx.shadowOffsetY = <span class="number">4</span>;</span><br><span class="line">	ctx.shadowBlur = <span class="number">8</span>;</span><br><span class="line">	ctx.shadowColor = <span class="string">"rgba(0, 0, 0, 0.5)"</span>;</span><br><span class="line">	ctx.font = <span class="string">"48px serif"</span>;</span><br><span class="line">	ctx.fillText(<span class="string">"Hello world"</span>, <span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line">	ctx.strokeText(<span class="string">"Hello world"</span>, <span class="number">10</span>, <span class="number">90</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/canvas-4.png" alt="canvas-4"></p>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>你需要进行以下一些步骤来画出一帧：<br>1.清空 canvas<br>除非接下来要画的内容会完全充满 canvas （例如背景图），否则你需要清空所有。最简单的做法就是用 clearRect 方法。<br>2.保存 canvas 状态<br>如果你要改变一些会改变 canvas 状态的设置（样式，变形之类的），又要在每画一帧之时都是原始状态的话，你需要先保存一下。<br>3.绘制动画图形（animated shapes）<br>这一步才是重绘动画帧。<br>4.恢复 canvas 状态<br>如果已经保存了 canvas 的状态，可以先恢复它，然后重绘下一帧。</p>
<h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span>support<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clock</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">  ctx.translate(<span class="number">75</span>,<span class="number">75</span>);</span><br><span class="line">  ctx.scale(<span class="number">0.4</span>,<span class="number">0.4</span>);</span><br><span class="line">  ctx.rotate(-<span class="built_in">Math</span>.PI/<span class="number">2</span>);</span><br><span class="line">  ctx.strokeStyle = <span class="string">"black"</span>;</span><br><span class="line">  ctx.fillStyle = <span class="string">"white"</span>;</span><br><span class="line">  ctx.lineWidth = <span class="number">8</span>;</span><br><span class="line">  ctx.lineCap = <span class="string">"round"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hour marks</span></span><br><span class="line">  ctx.save();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">6</span>);</span><br><span class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">120</span>,<span class="number">0</span>);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.restore();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Minute marks</span></span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.lineWidth = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">60</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">5</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">      ctx.beginPath();</span><br><span class="line">      ctx.moveTo(<span class="number">117</span>,<span class="number">0</span>);</span><br><span class="line">      ctx.lineTo(<span class="number">120</span>,<span class="number">0</span>);</span><br><span class="line">      ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.restore();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> sec = now.getSeconds();</span><br><span class="line">  <span class="keyword">var</span> min = now.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> hr  = now.getHours();</span><br><span class="line">  hr = hr&gt;=<span class="number">12</span> ? hr<span class="number">-12</span> : hr;</span><br><span class="line"></span><br><span class="line">  ctx.fillStyle = <span class="string">"black"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// write Hours</span></span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.rotate( hr*(<span class="built_in">Math</span>.PI/<span class="number">6</span>) + (<span class="built_in">Math</span>.PI/<span class="number">360</span>)*min + (<span class="built_in">Math</span>.PI/<span class="number">21600</span>)*sec )</span><br><span class="line">  ctx.lineWidth = <span class="number">14</span>;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo(<span class="number">-20</span>,<span class="number">0</span>);</span><br><span class="line">  ctx.lineTo(<span class="number">80</span>,<span class="number">0</span>);</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.restore();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// write Minutes</span></span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.rotate( (<span class="built_in">Math</span>.PI/<span class="number">30</span>)*min + (<span class="built_in">Math</span>.PI/<span class="number">1800</span>)*sec )</span><br><span class="line">  ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo(<span class="number">-28</span>,<span class="number">0</span>);</span><br><span class="line">  ctx.lineTo(<span class="number">112</span>,<span class="number">0</span>);</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.restore();</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Write seconds</span></span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.rotate(sec * <span class="built_in">Math</span>.PI/<span class="number">30</span>);</span><br><span class="line">  ctx.strokeStyle = <span class="string">"#D40000"</span>;</span><br><span class="line">  ctx.fillStyle = <span class="string">"#D40000"</span>;</span><br><span class="line">  ctx.lineWidth = <span class="number">6</span>;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo(<span class="number">-30</span>,<span class="number">0</span>);</span><br><span class="line">  ctx.lineTo(<span class="number">83</span>,<span class="number">0</span>);</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(<span class="number">95</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.fillStyle = <span class="string">"rgba(0,0,0,0)"</span>;</span><br><span class="line">  ctx.arc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.restore();</span><br><span class="line"></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.lineWidth = <span class="number">14</span>;</span><br><span class="line">  ctx.strokeStyle = <span class="string">'#325FA2'</span>;</span><br><span class="line">  ctx.arc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">142</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">  ctx.stroke();</span><br><span class="line"></span><br><span class="line">  ctx.restore();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(clock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(clock);</span><br></pre></td></tr></table></figure>
<p><canvas id="canvas" width="300" height="300">support</canvas></p>
<script>
function clock(){
  var now = new Date();
  var ctx = document.getElementById('canvas').getContext('2d');
  ctx.save();
  ctx.clearRect(0,0,150,150);
  ctx.translate(75,75);
  ctx.scale(0.4,0.4);
  ctx.rotate(-Math.PI/2);
  ctx.strokeStyle = "black";
  ctx.fillStyle = "white";
  ctx.lineWidth = 8;
  ctx.lineCap = "round";

  // Hour marks
  ctx.save();
  for (var i=0;i<12;i++){
    ctx.beginPath();
    ctx.rotate(Math.PI/6);
    ctx.moveTo(100,0);
    ctx.lineTo(120,0);
    ctx.stroke();
  }
  ctx.restore();

  // Minute marks
  ctx.save();
  ctx.lineWidth = 5;
  for (i=0;i<60;i++){
    if (i%5!=0) {
      ctx.beginPath();
      ctx.moveTo(117,0);
      ctx.lineTo(120,0);
      ctx.stroke();
    }
    ctx.rotate(Math.PI/30);
  }
  ctx.restore();

  var sec = now.getSeconds();
  var min = now.getMinutes();
  var hr  = now.getHours();
  hr = hr>=12 ? hr-12 : hr;

  ctx.fillStyle = "black";

  // write Hours
  ctx.save();
  ctx.rotate( hr*(Math.PI/6) + (Math.PI/360)*min + (Math.PI/21600)*sec )
  ctx.lineWidth = 14;
  ctx.beginPath();
  ctx.moveTo(-20,0);
  ctx.lineTo(80,0);
  ctx.stroke();
  ctx.restore();

  // write Minutes
  ctx.save();
  ctx.rotate( (Math.PI/30)*min + (Math.PI/1800)*sec )
  ctx.lineWidth = 10;
  ctx.beginPath();
  ctx.moveTo(-28,0);
  ctx.lineTo(112,0);
  ctx.stroke();
  ctx.restore();

  // Write seconds
  ctx.save();
  ctx.rotate(sec * Math.PI/30);
  ctx.strokeStyle = "#D40000";
  ctx.fillStyle = "#D40000";
  ctx.lineWidth = 6;
  ctx.beginPath();
  ctx.moveTo(-30,0);
  ctx.lineTo(83,0);
  ctx.stroke();
  ctx.beginPath();
  ctx.arc(0,0,10,0,Math.PI*2,true);
  ctx.fill();
  ctx.beginPath();
  ctx.arc(95,0,10,0,Math.PI*2,true);
  ctx.stroke();
  ctx.fillStyle = "rgba(0,0,0,0)";
  ctx.arc(0,0,3,0,Math.PI*2,true);
  ctx.fill();
  ctx.restore();

  ctx.beginPath();
  ctx.lineWidth = 14;
  ctx.strokeStyle = '#325FA2';
  ctx.arc(0,0,142,0,Math.PI*2,true);
  ctx.stroke();

  ctx.restore();

  window.requestAnimationFrame(clock);
}

window.requestAnimationFrame(clock);
</script>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript 方法call、apply、bind的使用详解及区别]]></title>
      <url>http://babymaychen.github.io/2016/06/20/javascript-%E6%96%B9%E6%B3%95call%E3%80%81apply%E7%AD%89%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>javascript 的这几种方法在我的编程中不经常出现，所以对之知之甚少，偶尔看见也是查一下，并没有深入了解，他们的区别也就更不知道了，所以在这里总结一下，也学习一下。</p>
</blockquote>
<h3 id="call-amp-apply"><a href="#call-amp-apply" class="headerlink" title="call() &amp; apply()"></a>call() &amp; apply()</h3><p>每个函数都包含两个非继承而来的方法：apply()和call()，他们的用途都是在特定作用域中调用函数。</p>
<pre><code>fun.call(thisArg[, arg1[, arg2[, ...]]]) 
</code></pre><p><code>call()</code>作用就是改变当前作用域，即改变this的指向，将函数对象从初始的上下文改变为由<code>thisArg</code>指定的新对象。<br><code>thisArg</code>：可选项，将被当做当前对象。如果没有thisArg，那么global对象将被用作thisArg。<br><code>arg1,arg2</code>：可选项，将被传递方法参数序列。</p>
<h4 id="call-案例"><a href="#call-案例" class="headerlink" title="call() 案例"></a>call() 案例</h4><h5 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"idTxt"</span> value=<span class="string">"input text"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = <span class="string">"global var"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">"member var"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.gFunc();  <span class="comment">//=&gt;global var</span></span><br><span class="line">gFunc.call(<span class="built_in">window</span>);  <span class="comment">//=&gt;global var</span></span><br><span class="line">gFunc.call(<span class="built_in">document</span>.getElementById(<span class="string">'idTxt'</span>));  <span class="comment">//=&gt;input text</span></span><br></pre></td></tr></table></figure>
<h5 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.a = <span class="string">"func"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="string">"func2"</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// func</span></span><br><span class="line">	<span class="built_in">console</span>.log(x); <span class="comment">// lalala</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func2.call(func, <span class="string">"lalala"</span>);</span><br></pre></td></tr></table></figure>
<p>首先解释下为啥func函数用了new这个关键字，用了new关键字就是一个构造函数，实际上就是创建了一个对象，这样就可以使this成为这个对象本身，而不是全局对象。</p>
<h5 id="demo3"><a href="#demo3" class="headerlink" title="demo3"></a>demo3</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [</span><br><span class="line">  &#123; species: <span class="string">'Lion'</span>, name: <span class="string">'King'</span> &#125;,</span><br><span class="line">  &#123; species: <span class="string">'Whale'</span>, name: <span class="string">'Fail'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; animals.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'#'</span> + i + <span class="string">' '</span> + <span class="keyword">this</span>.species + <span class="string">': '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;).call(animals[i], i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匿名函数的调用，把animals里的对象当做this指针，也很好理解。</p>
<p>apply()方法与call()方法基本一样，只是第二个参数传入的是数组，这里就不举例子了</p>
<pre><code>fun.apply(thisArg, [arg1,arg2,…argN])
</code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h3><p>bind()最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的this值。</p>
<h5 id="bind-案例"><a href="#bind-案例" class="headerlink" title="bind()案例"></a>bind()案例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    x: <span class="number">81</span>,</span><br><span class="line">    getX: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.getX()); <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getX = <span class="built_in">module</span>.getX;</span><br><span class="line"><span class="built_in">console</span>.log(getX()); <span class="comment">// 9，因为this是全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新方法，把this指向module</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = getX.bind(<span class="built_in">module</span>);</span><br><span class="line"><span class="built_in">console</span>.log(boundGetX()); <span class="comment">// 81</span></span><br></pre></td></tr></table></figure>
<h5 id="和setTimeout一起使用"><a href="#和setTimeout一起使用" class="headerlink" title="和setTimeout一起使用"></a>和setTimeout一起使用</h5><p>一般情况下setTimeout()的this指向window或global对象。当使用类的方法时需要this指向类实例，就可以使用bind()将this绑定到回调函数来管理实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bloomer</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.petalCount = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒后调用declare函数</span></span><br><span class="line">Bloomer.prototype.bloom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  setTimeout(<span class="keyword">this</span>.declare.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Bloomer.prototype.declare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我有 '</span> + <span class="keyword">this</span>.petalCount + <span class="string">' 朵花瓣!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blom = <span class="keyword">new</span> Bloomer();</span><br><span class="line">blom.bloom(); <span class="comment">// 我有 ** 朵花瓣！</span></span><br></pre></td></tr></table></figure>
<p><strong> 注意：对于事件处理函数和setInterval方法也可以使用上面的方法 </strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript this]]></title>
      <url>http://babymaychen.github.io/2016/06/20/javascript-this/</url>
      <content type="html"><![CDATA[<blockquote>
<p>this关键字在JavaScript中是一个动态变化的值，让初学者或者基础知识不扎实的人对它的理解不够，导致阅读别人代码或者自己写的时候出错，让我们开始学习它吧。</p>
</blockquote>
<h3 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h3><p>在全局范围内(不在任何方法内)，这就指全局对象，这时this等同于window。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* this 等于 window */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"aaa"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// "aaa"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// "aaa"</span></span><br></pre></td></tr></table></figure>
<h3 id="方法内部"><a href="#方法内部" class="headerlink" title="方法内部"></a>方法内部</h3><p>在一个方法内部，this的值取决于这个函数是怎么被调用的。</p>
<p>demo1 – 普通调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f1() === <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>没在严格模式下，this默认是一个全局对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f1() === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>在严格模式下，this等于给它设置的值，因为没有设置，所以就是undefined了。</p>
<p>demo2 – 对象方法调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	age: <span class="number">27</span>,</span><br><span class="line">	getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getAge()); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure>
<p>而当函数被作为某个对象的方法调用时，this等于那个对象。不过匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window（通过 call()或apply()改变函数执行环境的情况下，this 就会指向其他对象）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	age: <span class="number">27</span>,</span><br><span class="line">	getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getAge()()); <span class="comment">// 90</span></span><br></pre></td></tr></table></figure>
<p>每个函数在调用时，都会去获取2个值：arguments和this。匿名函数在获取这2个值时，只会搜索自己执行环境中的，永远不会直接访问外部函数或执行环境中的这2个变量。而this指向的是自己的调用者，匿名函数的调用者=window，所以this指向window。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	age: <span class="number">27</span>,</span><br><span class="line">	getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> _this.age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getAge()()); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure>
<p>要想让getAge方法获取自己对象中的age属性，需要在调用闭包前给this赋值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 闭包]]></title>
      <url>http://babymaychen.github.io/2016/06/16/JavaScript-%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闭包（closure）就是能够读取其他函数内部变量的函数。闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量。闭包主要有两个作用：一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量。</p>
</blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1.函数嵌套函数<br>2.函数内部可以引用外部的参数和变量<br>3.参数和变量不会被垃圾回收机制回收</p>
<h3 id="闭包作用域链"><a href="#闭包作用域链" class="headerlink" title="闭包作用域链"></a>闭包作用域链</h3><p>1.函数本身作用域。<br>2.闭包定义时的作用域。<br>3.全局作用域。</p>
<h3 id="创建函数的方法"><a href="#创建函数的方法" class="headerlink" title="创建函数的方法"></a>创建函数的方法</h3><p>在JavaScript中创建函数的方法有两种：函数声明和函数表达式，写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：函数表达式</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>还有一种自执行函数表达式，主要用于创建一个新的作用域，在此作用域内声明的变量不会和其它作用域内的变量冲突或混淆，大多是以匿名函数方式存在，且立即自动执行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>此种自执行函数表达式归类于以上两种方法的第二种，也算是函数表达式。</p>
<h3 id="闭包案例"><a href="#闭包案例" class="headerlink" title="闭包案例"></a>闭包案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testVarible</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">debugger</span>;</span><br><span class="line">		num++;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testNum = testVarible();</span><br><span class="line">testNum(); <span class="comment">// 667</span></span><br></pre></td></tr></table></figure>
<p>上记代码说明变量num没有随着函数调用完后而消失。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClosure</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'n = '</span> + n;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">	arr[index] = createClosure(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(arr[index]());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上记代码闭包代码createClosure()方法会在每次循环中调用，每次循环的时候就会产生新的作用域，就会产生10个不同的作用域，最后的结果就是n=0,n=1,n=2,…,n=9</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClosure</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">		arr[index] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'n = '</span> + index;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createClosure();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(arr[index]());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上记代码闭包代码createClosure()方法只调用一次，只有一个作用域，所以变量会是最后一次调用完后的值，最后的结果就是n=10,n=10,n=10,…,n=10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css3 animation]]></title>
      <url>http://babymaychen.github.io/2016/06/16/css3-%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CSS3 animations allows animation of most HTML elements without using JavaScript or Flash! 用css也可以写出漂亮的动画，使用keyframe来指定css属性随着时间的变化。animation类似与transition，因为它们都是随时间改变css属性的。主要区别是，transition是当值改变时触发，animation实在animation属性被应用后明确的执行。</p>
</blockquote>
<h3 id="关键帧-keyframes-规则"><a href="#关键帧-keyframes-规则" class="headerlink" title="关键帧(@keyframes) 规则"></a>关键帧(@keyframes) 规则</h3><p>关键帧被用于在动画过程中指定用于在各个点的动画属性的值。关键帧指定了动画的一个周期的行为，动画可以迭代一次或多次.一个@keyframes规则包含了关键字@keyframes，然后跟着标识符给出动画的名称（它会被animation-name引用到），最后是一组样式规则（由大括号分隔）。为了确定该组的关键帧，所有的选择器的值按时间递增顺序排序。如果有任何重复，那么@keyframes规则内指定的最后一个关键帧将被用于提供那时关键帧的信息。如果有多个关键帧指定了相同的关键帧选择器值时，在@keyframes规则中不会重叠。</p>
<p><strong> 语法 </strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@keyframes &lt;identifier&gt; &#123; &lt;keyframes-blocks&gt; &#125;</span><br><span class="line">&lt;keyframes-blocks&gt;：[ [ from | to | &lt;percentage&gt; ]&#123; sRules &#125; ] [ [ , from | to | &lt;percentage&gt; ]&#123; sRules &#125; ]*</span><br></pre></td></tr></table></figure>
<p><strong> 取值 </strong></p>
<ul>
<li>identifier：identifier定义一个动画名称</li>
<li>keyframes-blocks：定义动画在每个阶段的样式，即帧动画。</li>
</ul>
<h3 id="animation-属性"><a href="#animation-属性" class="headerlink" title="animation 属性"></a>animation 属性</h3><p>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</p>
<ul>
<li>animation-name：规定需要绑定到选择器的 keyframe 名称。</li>
<li>animation-duration：规定完成动画所花费的时间，以秒或毫秒计。</li>
<li>animation-timing-function：规定动画的速度曲线。</li>
<li>animation-delay：规定在动画开始之前的延迟。</li>
<li>animation-iteration-count：规定动画应该播放的次数(infinite或者是数字)。</li>
<li>animation-direction：规定是否应该轮流反向播放动画。</li>
<li>animation-fill-mode：检索或设置对象动画时间之外的状态。</li>
<li>animation-play-state：检索或设置对象动画的状态。</li>
</ul>
<h4 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-direction: normal|reverse|alternate|alternate-reverse|initial|inherit;</span><br></pre></td></tr></table></figure>
<ul>
<li>normal：正常方向</li>
<li>reverse: 反方向运行(从100%到0%)</li>
<li>alternate：动画先正常运行再反方向运行，并持续交替运行</li>
<li>alternate-reverse：动画先反运行再正方向运行，并持续交替运行</li>
</ul>
<p>alternate 的例子</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.animation-1</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">	<span class="attribute">animation</span>: myfirst <span class="number">5s</span> infinite;</span><br><span class="line">	<span class="attribute">-webkit-animation</span>: myfirst <span class="number">5s</span> infinite; <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">	<span class="attribute">-webkit-animation-direction</span>: alternate; <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">	<span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">    0%   &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>: <span class="number">0px</span>; <span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">    100% &#123;<span class="attribute">background</span>: yellow; <span class="attribute">left</span>: <span class="number">80%</span>; <span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">    0%   &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>: <span class="number">0px</span>; <span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">    100% &#123;<span class="attribute">background</span>: yellow; <span class="attribute">left</span>: <span class="number">80%</span>; <span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animation-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="animation-1"></div>

<h4 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-play-state: running | paused</span><br></pre></td></tr></table></figure>
<p>属性规定动画正在运行还是暂停。</p>
<h4 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-fill-mode: none|forwards|backwards|both|initial|inherit;</span><br></pre></td></tr></table></figure>
<ul>
<li>none：默认值。不设置对象动画之外的状态</li>
<li>forwards：设置对象状态为动画结束时的状态</li>
<li>backwards：设置对象状态为动画开始时的状态</li>
<li>both：设置对象状态为动画结束或开始的状态</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css3 transition]]></title>
      <url>http://babymaychen.github.io/2016/06/15/css3-%E8%BF%87%E6%B8%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>W3C标准中对CSS3的transition这是样描述的:“CSS的transition允许CSS的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。”</p>
</blockquote>
<h3 id="transition-主要有四个参数"><a href="#transition-主要有四个参数" class="headerlink" title="transition 主要有四个参数"></a>transition 主要有四个参数</h3><ul>
<li><p>transition-property<br>检索或设置对象中的参与过渡的属性(全部就写all), 具体参照<a href="http://css.doyoe.com/properties/transition/transition-property.htm" target="_blank" rel="external">css手册</a></p>
</li>
<li><p>transition-duration<br>检索或设置对象过渡的持续时间</p>
</li>
<li><p>transition-timing-function<br>检索或设置对象中过渡的动画类型</p>
</li>
<li><p>transition-delay<br>检索或设置对象延迟过渡的时间</p>
</li>
</ul>
<h3 id="transition-timing-function-参数介绍"><a href="#transition-timing-function-参数介绍" class="headerlink" title="transition-timing-function 参数介绍"></a>transition-timing-function 参数介绍</h3><ul>
<li>linear: 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</li>
<li>ease: 规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</li>
<li>ease-in: 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</li>
<li>ease-out: 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</li>
<li>ease-in-out: 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</li>
<li>cubic-bezier(n,n,n,n): 特定的贝塞尔曲线类型,4个数值需在[0, 1]区间内。</li>
</ul>
<p>下面的例子会很好的理解这几个函数</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transition-container"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"linear small"</span>&gt;</span>linear<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ease small"</span>&gt;</span>ease<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ease-in small"</span>&gt;</span>ease-in<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ease-out small"</span>&gt;</span>ease-out<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ease-in-out small"</span>&gt;</span>ease-in-out<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.small</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#B1B6B9</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ED8029</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.linear</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-transition</span>: <span class="number">3s</span> linear;</span><br><span class="line">	<span class="attribute">-moz-transition</span>: <span class="number">3s</span> linear;</span><br><span class="line">	<span class="attribute">-o-transition</span>: <span class="number">3s</span> linear;</span><br><span class="line">	<span class="attribute">-ms-transition</span>: <span class="number">3s</span> linear;</span><br><span class="line">	<span class="attribute">transition</span>: <span class="number">3s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ease</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-transition</span>: <span class="number">3s</span> ease;</span><br><span class="line">	<span class="attribute">-moz-transition</span>: <span class="number">3s</span> ease;</span><br><span class="line">	<span class="attribute">-o-transition</span>: <span class="number">3s</span> ease;</span><br><span class="line">	<span class="attribute">-ms-transition</span>: <span class="number">3s</span> ease;</span><br><span class="line">	<span class="attribute">transition</span>: <span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ease-in</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-transition</span>: <span class="number">3s</span> ease-in;</span><br><span class="line">	<span class="attribute">-moz-transition</span>: <span class="number">3s</span> ease-in;</span><br><span class="line">	<span class="attribute">-o-transition</span>: <span class="number">3s</span> ease-in;</span><br><span class="line">	<span class="attribute">-ms-transition</span>: <span class="number">3s</span> ease-in;</span><br><span class="line">	<span class="attribute">transition</span>: <span class="number">3s</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ease-out</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-transition</span>: <span class="number">3s</span> ease-out;</span><br><span class="line">	<span class="attribute">-moz-transition</span>: <span class="number">3s</span> ease-out;</span><br><span class="line">	<span class="attribute">-o-transition</span>: <span class="number">3s</span> ease-out;</span><br><span class="line">	<span class="attribute">-ms-transition</span>: <span class="number">3s</span> ease-out;</span><br><span class="line">	<span class="attribute">transition</span>: <span class="number">3s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ease-in-out</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-transition</span>: <span class="number">3s</span> ease-in-out;</span><br><span class="line">	<span class="attribute">-moz-transition</span>: <span class="number">3s</span> ease-in-out;</span><br><span class="line">	<span class="attribute">-o-transition</span>: <span class="number">3s</span> ease-in-out;</span><br><span class="line">	<span class="attribute">-ms-transition</span>: <span class="number">3s</span> ease-in-out;</span><br><span class="line">	<span class="attribute">transition</span>: <span class="number">3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.transition-container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span><span class="selector-class">.small</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把鼠标放到图片上看效果</p>
<div class="transition-container"><br>    <div class="linear css3-transition-small">linear</div><br>    <div class="ease css3-transition-small">ease</div><br>    <div class="ease-in css3-transition-small">ease-in</div><br>    <div class="ease-out css3-transition-small">ease-out</div><br>    <div class="ease-in-out css3-transition-small">ease-in-out</div><br></div>

<p>再来个例子，把鼠标放到图片上看效果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.css3-transition-div</span> &#123;</span><br><span class="line">	<span class="attribute">cursor</span>: pointer;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">220px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#B1B6B9</span>;</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#888888</span>;</span><br><span class="line">	<span class="attribute">transition</span>: transform:scale <span class="number">0.9s</span> ease-in;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(../images/autumn.png) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.css3-transition-div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(0.4, 0.4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code class="html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"css3-transition-div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>
</code></pre>
<div class="css3-transition-div"><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css3 transform]]></title>
      <url>http://babymaychen.github.io/2016/06/15/css3-%E5%8F%98%E6%8D%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>transform的含义就是改变，使…变形，很好理解，这篇文章也是css3的第一篇，让我进入css3的大门，开始前进吧。这些改变全是以自身为参考的哈，改变么，就是自己的改变。<br>注：这里的x、y、z可以大写也可以小写，如：translatex(x) 和 translateX(x) 都可以。</p>
</blockquote>
<h3 id="移动（translate）"><a href="#移动（translate）" class="headerlink" title="移动（translate）"></a>移动（translate）</h3><p>translate(x,y)：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0。</p>
<p>translatex(x)：指定对象X轴（水平方向）的平移。</p>
<p>translatey(y)：指定对象Y轴（水平方向）的平移。</p>
<p>translate3d(x,y,z)：指定对象的3D位移。第1个参数对应X轴，第2个参数对应Y轴，第3个参数对应Z轴。</p>
<h3 id="旋转（rotate）"><a href="#旋转（rotate）" class="headerlink" title="旋转（rotate）"></a>旋转（rotate）</h3><p>rotate(angle)：2D旋转，参数是规定的角度(默认的旋转中心是中心)。与transform-origin配合使用，transform-origin定义旋转的基本点，正值是顺时针，负值是逆时针。例如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#B1B6B9</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#888888</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(10deg);</span><br><span class="line">    <span class="attribute">transform-origin</span>: right top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code class="html"><span class="tag">&lt;<span class="name">div</span>&gt;</span>
    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"autumn.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span>
<span class="tag">&lt;/<span class="name">div</span>&gt;</span>
</code></pre>
<p><img src="/uploads/rotate-1.png" alt="rotate-1"></p>
<p>rotateX(angle)：指定对象在x轴上的旋转角度</p>
<p>rotateY(angle)：指定对象在y轴上的旋转角度</p>
<p>rotateZ(angle)：指定对象在z轴上的旋转角度</p>
<p>rotate3d(x,y,z,angle)：3D旋转，x、y、z分别表示三个轴他们的值可以是0或1，rotate3d(1, 0, 0,angle)等同于rotateX(angle), rotate3d(0, 1, 0,angle)等同于rotateY(angle), rotate3d(0, 0, 1,angle)等同于rotateZ(angle)。</p>
<h3 id="缩放（scale）"><a href="#缩放（scale）" class="headerlink" title="缩放（scale）"></a>缩放（scale）</h3><p>scale(x,y): 2D缩放x、y分别表示在x轴和y轴上缩放的大小，大于1就是放大小于1就是缩小，如果第二个参数未提供，则默认取第一个参数的值。把参数换成负数，会有很好玩的事情发生哦。</p>
<p>scalex(x): 只缩放x轴上的大小。</p>
<p>scaley(y): 只缩放y轴上的大小。</p>
<p>scale3d(x, y, z): 3D缩放，x、y、z分别表示x轴、y轴和z轴上的缩放大小。</p>
<h3 id="扭曲（skew）"><a href="#扭曲（skew）" class="headerlink" title="扭曲（skew）"></a>扭曲（skew）</h3><p>skew(x-angle,y-angle)：指定对象沿着 X 和 Y 轴的 2D 倾斜转换。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0。</p>
<p>skewX(angle)：指定对象沿着 X 轴的 2D 倾斜转换。</p>
<p>skewY(angle)：指定对象沿着 Y 轴的 2D 倾斜转换。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS 使用技巧]]></title>
      <url>http://babymaychen.github.io/2016/06/15/css-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>掌握css的使用技巧可以减少很多Google的时间，逼格也瞬间提升，这篇文章记录了一些必要的技巧，供自己和大家参考。</p>
</blockquote>
<p><img src="/uploads/css.png" alt="css"></p>
<h3 id="1-块级元素的水平居中"><a href="#1-块级元素的水平居中" class="headerlink" title="1. 块级元素的水平居中"></a>1. 块级元素的水平居中</h3><p>先为该元素设定一个明确的宽度，然后将margin的水平值设为auto。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;<span class="attribute">width</span>: <span class="number">960px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-块级元素的水平-垂直居中"><a href="#2-块级元素的水平-垂直居中" class="headerlink" title="2. 块级元素的水平+垂直居中"></a>2. 块级元素的水平+垂直居中</h3><p>水平居中很容易，但是垂直居中就显得力不从心，大家也都会用定位，直接left:50%, top:50%，但是得到的效果却是…</p>
<p><img src="/uploads/cssSkill-1.png" alt="cssSkill-1"></p>
<p>这是因为定位是相对与该元素的左上角的，看图不难看出小方块的左上角确实在大方块的中心，这又该如何是好呢，我们可以<strong>让小方块分别向上和向左移动自身高度和宽度的一半距离</strong>，这样就能正好使其在大方块中间。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>	&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#85b730</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#e4bd0a</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin</span>: -<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是问题又来了，如果我们不知道小方块的大小，或者大小是不固定的，那又怎么办呢，这时我们可以用css3的一个属性transform里的translate，后面会有介绍css3的文章的哈，在b里把margin换成这个属性，再试试。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">-50</span>%, <span class="selector-tag">-50</span>%);</span><br></pre></td></tr></table></figure>
<p>当当当当，居中啦</p>
<p><img src="/uploads/cssSkill-2.png" alt="cssSkill-2"></p>
<h3 id="3-强制文字不换行"><a href="#3-强制文字不换行" class="headerlink" title="3. 强制文字不换行"></a>3. 强制文字不换行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br></pre></td></tr></table></figure>
<h3 id="4-当文字过长时出现点点点"><a href="#4-当文字过长时出现点点点" class="headerlink" title="4. 当文字过长时出现点点点"></a>4. 当文字过长时出现点点点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis ;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-图片大小自适应"><a href="#5-图片大小自适应" class="headerlink" title="5. 图片大小自适应"></a>5. 图片大小自适应</h3><p>使得较大的图片，能够自动适应小容器的宽度</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;<span class="attribute">max-width</span>: <span class="number">100%</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-装饰获得焦点的输入框"><a href="#6-装饰获得焦点的输入框" class="headerlink" title="6. 装饰获得焦点的输入框"></a>6. 装饰获得焦点的输入框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123; <span class="attribute">border</span>: <span class="number">2px</span> solid green; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-让一个方形的div变成圆形"><a href="#7-让一个方形的div变成圆形" class="headerlink" title="7. 让一个方形的div变成圆形"></a>7. 让一个方形的div变成圆形</h3><p>该方法可以让你的头像变成圆形</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 50%;</span><br></pre></td></tr></table></figure>
<h3 id="8-撑高父元素"><a href="#8-撑高父元素" class="headerlink" title="8. 撑高父元素"></a>8. 撑高父元素</h3><p>在编码的时候总会遇到这种情况，明明有子元素，子元素也有高度，但是这个父元素高度却是0，很棘手，这时就要想想，子元素可能<strong>不在文档的普通流中，并不占任何物理位置，并且不会独占一行</strong>，如下</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>	&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#85b730</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#e4bd0a</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/cssSkill-3.png" alt="cssSkill-3"></p>
<p>再试试下面的代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a clearfix"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">visibility</span>: hidden;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-基础字体大小"><a href="#9-基础字体大小" class="headerlink" title="9. 基础字体大小"></a>9. 基础字体大小</h3><p>在一个多平台的页面，字体大小的设置应该随着窗口的大小变化而变化</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">font-size</span>:<span class="number">62.5%</span>&#125;</span><br></pre></td></tr></table></figure>
<p>这时使用字体的时候用em，h1的大小就是24px</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">font-size</span>: <span class="number">2.4em</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-蒙版"><a href="#10-蒙版" class="headerlink" title="10. 蒙版"></a>10. 蒙版</h3><p>半透明，后面的不可点</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modalBK</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity =80);</span><br><span class="line">    <span class="attribute">-moz-opacity</span>: <span class="number">0.80</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS 理解优先级、布局和定位]]></title>
      <url>http://babymaychen.github.io/2016/06/14/css/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>CSS</strong>是显示网页的很棒的语言，也是很好学的语言，初学css的人在修改一些样式时，往往显得力不从心，因为自己就经历过，可能明明我改了这个颜色，但是却没生效，或者我想让这个div在页面的中间显示，但是就是不在中间，要不就是不理解float、position等不好理解的属性，下面就开始学习吧。</p>
</blockquote>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>浏览器是通过判断优先级来决定哪些元素应用哪些样式的，如果优先级相同，浏览器会应用css中靠后声明的。</p>
<ol>
<li><p>优先级顺序(由低到高)</p>
<ul>
<li>通用选择器*</li>
<li>元素(类型)选择器</li>
<li>类选择器</li>
<li>属性选择器</li>
<li>伪类</li>
<li>ID 选择器</li>
<li>内联样式</li>
</ul>
</li>
<li><p>!important(不推荐)</p>
<p>   它的优先级会超越任何地方、任何方式的样式声明，包括行内style属性中声明的样式。不推荐这个用法的原因是，这会导致我们不好调试，找不到哪里给强制了，所以还是推荐使用css的级联属性。</p>
</li>
<li><p>级联属性(推荐)</p>
<p>缩小选择的范围，使你的选择器更有针对性而提高优先级：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">span</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-id">#test</span> <span class="selector-tag">span</span> &#123; <span class="attribute">color</span>: green &#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123; <span class="attribute">color</span>: blue &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>无论css语句顺序是怎样的，都会显示绿色，因为只有这条规则范围最小，优先级最高。</p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>css的布局是很常用也是用不好的一个部分，学好布局，你就离成功很近了。</p>
<ol>
<li><p>display<br>  none：隐藏对象。与visibility的hidden不同，其不保存物理空间。<br>  inline：指定对象为内联元素。(默认值)。<br>  block：指定对象为块元素。<br>  inline-block：指定对象为内联块元素。</p>
<h4 id="内联元素-也叫行内元素"><a href="#内联元素-也叫行内元素" class="headerlink" title="内联元素(也叫行内元素)"></a>内联元素(也叫行内元素)</h4><p>  行内元素不可以设置宽（width）和高（height），但可以与其他行内元素位于同一行，行内元素内一般不可以包含块级元素。行内元素的高度一般由元素内部的字体大小决定，宽度由内容的长度控制，可以有padding和margin，给内联元素设置padding和margin只会影响元素水平方向上的空间，垂直方向上的空间不会发生变化。常见的行内元素有a, em ,strong等。</p>
<h4 id="块元素-也叫块级元素"><a href="#块元素-也叫块级元素" class="headerlink" title="块元素(也叫块级元素)"></a>块元素(也叫块级元素)</h4><p>  块状元素排斥其他元素与其位于同一行，可以设定元素的宽（width）和高（height），块级元素一般是其他元素的容器，可容纳块级元素和行内元素。常见的块级元素有div, p ,h1~h6等。</p>
<h4 id="内联块元素"><a href="#内联块元素" class="headerlink" title="内联块元素"></a>内联块元素</h4><p>  与行内元素类似，但是可以为Inline-block元素设置宽度和高度。给Inline-block元素设置宽度和高度将会影响该元素的水平和垂直方向上的空间。  </p>
</li>
<li><p>float<br>  none：设置对象不浮动。(默认值)<br>  left：设置对象浮在左边。<br>  right：设置对象浮在右边。</p>
<h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>  浮动模型也是一种可视化格式模型，浮动的框可以左右移动（根据float属性值而定），直到它的外边缘碰到包含框或者另一个浮动元素的框的边缘。浮动元素不在文档的普通流中，文档的普通流中的元素表现的就像浮动元素不存在一样。下面是我定义了三个div来举例说明。</p>
<p>  1.默认状态下，float：none</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>	&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#85b730</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#e4bd0a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#de4040</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  <img src="/uploads/float-1.png" alt="float-1"></p>
<p>  2.向右浮动，float:right;<br>  因为绿色的框脱离了文档流，它并不占空间，所以黄色的框可以和它共处一行</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#85b730</span>;</span><br><span class="line">	<span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="/uploads/float-2.png" alt="float-2"></p>
<p>  3.向左浮动，float:left; 因为绿色的框脱离了文档流，它并不占空间，所以挡住了黄色的框</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#85b730</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="/uploads/float-3.png" alt="float-3"></p>
<p>  4.全部向左浮动，<br>  因为黄色的框碰到了另一个浮动的框（绿色的框），所以停住了，同理红色的框遇到黄色的框</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="/uploads/float-4.png" alt="float-4"></p>
<p>  5.全部向左浮动，<br>  当浮动框的长度很大，放不下三个框时，第三个框会向下移动</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="/uploads/float-5.png" alt="float-5"></p>
<p>  6.全部向左浮动，<br>  绿色框高度变大，挡住了向下的红色框</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="/uploads/float-6.png" alt="float-6"></p>
<p>  注意事项：float在绝对定位和display为none时不生效。</p>
</li>
<li><p>clear<br>  none：允许两边都有浮动对象。(默认值)<br>  left：不允许左边有浮动对象。<br>  right：不允许右边有浮动对象。<br>  both：不允许有浮动对象。</p>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>  该属性的值指出了不允许有浮动对象的边。</p>
<ul>
<li><p>clear: left; 该对象的左边不能挨着浮动对象的边，第二个框会向下移动。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-class">.b</span> &#123; <span class="attribute">clear</span>: left; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/clear-1.png" alt="clear-1"></p>
</li>
<li><p>clear: right; 该对象的右边不能挨着浮动对象的边。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b</span> &#123; <span class="attribute">clear</span>: right; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/float-4.png" alt="float-4"></p>
<p>这样做之后我们发现，红框文思没动，这不是我们想要的，<strong>一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素</strong>，如果想要让红框下去，我们只能作用在红框身上</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c</span> &#123; <span class="attribute">clear</span>: left; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/clear-1.png" alt="clear-1"></p>
</li>
</ul>
</li>
<li><p>overflow</p>
<p>visible：对溢出内容不做处理，内容可能会超出容易。(默认)<br>   hidden：隐藏溢出容易的内容且不出现滚动条。<br>   scroll：隐藏溢出容器的内容，溢出的内容将以滚动条的方式显示。<br>auto：当内容没有溢出时不出现滚动条，当内容溢出容器时出现滚动条。</p>
</li>
</ol>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>允许你对元素进行定位</p>
<p>   1.position</p>
<ul>
<li>static：对象遵循常规流。此时4个定位偏移属性不会被应用。</li>
<li>relative：对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left这4个定位偏移属性进行偏移时不会影响常规流中的任何元素。</li>
<li>absolute：<strong>对象脱离常规流</strong>，此时偏移属性参照的是离自身最近的定位祖先元素，如果没有定位的祖先元素，则一直回溯到body元素。盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。</li>
<li><p>fixed：与absolute一致，但偏移定位是以窗口为参考。当出现滚动条时，对象不会随着滚动。</p>
<p>注意：<strong>想要在某个父元素里定位absolute的，一定要确认该父元素是否是relative。</strong></p>
<p>例：我们想让b元素在a元素中离左边10个像素，但是当没有给a元素定义position:relative时,b元素没有在a元素中，而是离body左边10个像素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>	&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#85b730</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#e4bd0a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/position-1.png" alt="position-1"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript 基础]]></title>
      <url>http://babymaychen.github.io/2016/06/13/javascript/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>JavaScript</strong>是前端工程师必备的技能之一，也是基础中的基础，但是我本人又是个不太重视基础的人，这就导致我在写代码的时候，总会忘记这该怎么写，或者在面试的时候，被问及原理或者基础的语法的时候，总是语塞，而且近几年JavaScript的发展很快，有统治全世界的架势，这也就是为什么我要写这篇文章的原因，让我们一步一步来，坚实的地基才会盖得起高楼大厦。</p>
</blockquote>
<h3 id="JavaScript-介绍"><a href="#JavaScript-介绍" class="headerlink" title="JavaScript 介绍"></a>JavaScript 介绍</h3><p>JavaScript是一种可以用来给网页增加交互性的编程语言，现在也被用于网络服务器（非浏览器环境），如Node.js。<br>JavaScript分为三部分，<strong>ECMAScript</strong>（JavaScript核心语音）、<strong>DOM</strong>（文档对象模型）和<strong>BOM</strong>（浏览器对象模型）。ECMAScript，描述了该语言的语法和基本对象。DOM，描述处理网页内容的方法和接口。BOM，提供了独立于内容而在浏览器窗口之间进行交互的对象和方法。</p>
<p>ECMAScript是由ECMA TC39委员会进行标准化的一门编程语言，规定了 JavaScript 脚本的核心语法，如 数据类型、关键字、保留字、运算符、对象和语句等，它不属于任何浏览器，现在最新版本是<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6.0</a>。</p>
<p>DOM是“ Document Object Model ”的缩写，简称“文本对象模型”，定义了 JavaScript 操作 HTML 文档的接口，提供了访问 HTML 文档（如body、form、div、textarea等）的途径以及操作方法，通过调用DOM树上对象的方法可以操纵这些对象。</p>
<p>BOM 是“ Browser Object Model ”的缩写，简称“ 浏览器对象模型 ”，定义了 JavaScript 操作浏览器的接口，提供了访问某些功能（如浏览器窗口大小、版本信息、浏览历史记录等）的途径以及操作方法。</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul>
<li>变量名必须以字母、$、_开头</li>
<li>定义了的变量没有赋值，会有个默认值undefined</li>
<li>变量可以存储两种类型的值，原始值和引用值</li>
<li>原始值：Undefined、Null，Boolean、Number、String</li>
<li>特殊值：NaN，会发生在类型转换失败时</li>
<li>字符串转换：toString()方法，Number转换时加的参数可以是2、8、10（默认）、16，分别转换成二进制、八进制、十进制、十六进制字符串，数组转换时，会变成用“ , ”连接的字符串，<code>String()</code>与<code>toString()</code>的唯一区别是对 null 和 undefined 值强制类型转换可以生成字符串而不引发错误</li>
<li>数字转换： parseInt()、parseFloat()，转换的是部分数值如：<code>parseFloat(&quot;123end&quot;)</code>结果为123，而<code>Number(&quot;123end&quot;)</code>结果为NaN</li>
<li>Boolean转换：Boolean()，除了空串、null、数字 0、undefined 或 null，它将返回 false，其他都是true</li>
<li>Object对象，所有对象都由这个对象继承，Object对象里的所有属性和方法都会出现在其他的对象中，因此学习Object对象很重要。</li>
</ul>
<h3 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h3><p>Object对象，所有对象都由这个对象继承，Object对象里的所有属性和方法都会出现在其他的对象中，因此学习Object对象很重要。<br>Object对象常见的属性：</p>
<ol>
<li>constructor，指向原始的Object()函数，如<code>var test = new Array(); test.constructor == Array</code> 返回true；</li>
<li>Prototype，它默认返回 Object 对象的一个实例，使您有能力向对象添加属性和方法，如<code>Array.prototype.dd = &quot;33&quot;; var test = new Array(); console.log(test.dd);</code> 结果就是”33”,注意先后顺序；</li>
<li>hasOwnProperty，判断对象是否有某个特定的属性，必须用字符串指定该属性，而且是自身属性，如上记2的例子中，<code>test.hasOwnProperty(&quot;dd&quot;);</code> 返回的是false；</li>
<li>isPrototypeOf，判断该对象是否为另一个对象的原型，如 <code>var test = new Array(); Array.prototype.isPrototypeOf(test)</code> 返回true；</li>
</ol>
<h3 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h3><p>Array 对象用于在单个的变量中存储多个值，也是常用的对象，所以在这里单列出来。</p>
<ul>
<li><p>创建数组的方法：</p>
<ol>
<li><code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</code> （推荐）</li>
<li><code>var arr = new Array(3); arr[0] = &quot;a&quot;; arr[1] = &quot;b&quot;; arr[2] = &quot;c&quot;</code></li>
<li><code>var arr = new Array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</code></li>
</ol>
</li>
<li><p>Array 对象常用方法：</p>
<ol>
<li><strong>concat()</strong>，连接两个或更多的数组，并返回结果。如 <code>var arr1 = [1, 2, 3]; var arr2 = [4, 5]; arr1.concat(arr2);</code> 结果输出是[1,2,3,4,5], 需要注意的是arr1和arr2是不变的；</li>
<li><strong>join()</strong>, 把数组的所有元素放入一个字符串, 元素通过指定的分隔符进行分隔。如 <code>var arr = [1, 2, 3]; arr.join(&quot;.&quot;);</code>返回结果是”1.2.3”；</li>
<li><strong>pop()</strong>, 删除并返回数组的最后一个元素。如 <code>var arr = [1, 2, 3]; arr.pop();</code>返回删除的最后一个元素 3， 注意的是，此时的arr已经没有了最后一个元素，<code>console.log(arr);</code>结果是[1, 2]；</li>
<li><strong>push()</strong>, 可向数组的末尾添加一个或多个元素，并返回新的长度。如 <code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; arr.push(&quot;d&quot;);</code>结果是4, 注意此时的arr已经多了一个元素，<code>console.log(arr);</code>结果是[“a”, “b”, “c”，”d”]；</li>
<li><strong>reverse()</strong>,颠倒数组中元素的顺序。如 <code>var arr = [1, 2, 3]; arr.reverse();</code> 返回的结果是[3, 2, 1], 注意此时的arr已经改变了，<code>console.log(arr);</code>结果是[3, 2, 1]；</li>
<li><strong>shift()</strong>,删除第一个元素，并返回刚才删除的第一个元素的值。如 <code>var arr = [1, 2, 3]; arr.shift();</code> 返回的结果是1, 注意此时的arr已经改变了，<code>console.log(arr);</code>结果是[2, 3]；</li>
<li><strong>slice()</strong>, 从已有的数组中返回选定的元素。有两个参数，start和end，开始和结束的位置，当只有一个参数时，默认end是最后，如 <code>var arr = [1, 2, 3]; arr.slice(1);</code> 返回的是[2, 3], 负值时，从尾部开始计算，如 <code>var arr = [1, 2, 3]; arr.slice(-1);</code> 返回的结果是[3], 注意该方法返回的是字数组，不会改变原来的数组；</li>
<li><strong>splice()</strong>, 从数组中添加/删除项目，然后返回被删除的项目, 该方法有三个参数，index：必须，整数，添加或删除项目的位置，howmany：必须，要删除的项目数量，设置为0时，不会删除，item1,…,item2：可选，向数组添加的新项目，如 <code>var arr =[1, 2, 3]; arr.splice(0, 1);</code> 返回结果是[1],删除了第一个项目，注意此时的arr已经改变了，<code>console.log(arr);</code>结果是[2, 3]，<code>var arr =[1, 2, 3]; arr.splice(2, 0, 4, 5);</code>返回的结果是[], <code>console.log(arr);</code>结果是[1, 2, 4, 5, 3]，此时应该注意的是splice和slice的区别；</li>
</ol>
</li>
</ul>
<h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h3><p>String对象也就是存数字符串的，下面的方法是最常用的也是最容易混淆的。</p>
<ul>
<li><p>String 对象常用方法：</p>
<ol>
<li><strong>charAt()</strong>，返回指定位置的字符。该方法有一个位置参数，如<code>var str = &quot;Hello May&quot;; str.charAt(6);</code>结果是”M”，如果参数不在0和string.length之间，将返回空串；</li>
<li><strong>indexOf()</strong>， 返回指定的字符串在在字符串中首次出现的位置。该方法有俩参数，searchvalue：必须，要检索的字符串，fromindex：可选，开始检索的位置，如果参数不在0和string.length之间，将从头开始检索。如 <code>var str = &quot;Hello May&quot;; str.indexOf(&quot;M&quot;);</code>结果是6，<code>var str = &quot;Hello May&quot;; str.indexOf(&quot;M&quot;, 7);</code>结果是-1，找不到该字符串时，返回结果为-1；</li>
<li><strong>lastIndexOf()</strong>，与indexOf()方法相反，返回最后一个出现的位置；</li>
<li><strong>match()</strong>，在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。参数，必须，可以是要检索的字符串，也可以是要匹配的正则表达式。如 <code>var str = &quot;Hello May&quot;; str.match(&quot;May&quot;);</code> 返回的结果是[“May”], <code>var str = &quot;Hello May&quot;; str.match(/\d+/g);</code>结果就是null；</li>
<li><strong>replace()</strong>, 在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。如 <code>var str = &quot;Hello World&quot;; str.replace(&quot;World&quot;, &quot;May&quot;);</code> 结果返回”Hello May”，注意的是，此时arr没有被改变，<code>console.log(str);</code>结果是”Hello World”；</li>
<li><strong>split()</strong>，把一个字符串分割成字符串数组。该方法有两个参数，separator：必须，要分割的字符串或正则表达式，howmany：可选，指定返回数组的最大长度。如    <code>var str = &quot;How are you?&quot;; str.split(&quot; &quot;, 2);</code> 返回结果是[“How”, “are”]；</li>
<li><strong>substr()</strong>，在字符串中抽取从指定下标开始的指定数目的字符（包括开始下标位置的字符）。该方法有俩参数，start：必须，要抽取的子串下标，可以是负数，-1是最后一个字符，length：可选，子串中的字符数，必须是正整数。如 <code>var str = &quot;Hello World&quot;; str.substr(5);</code>返回的结果是” World”,<code>var str = &quot;Hello World&quot;; str.substr(5, 4);</code>返回结果是” Wor”，找不到的情况下返回空串。</li>
<li><strong>substring()</strong>，提取字符串中介于两个指定下标之间的字符。与substr()不同，两个参数分别为开始和结束的下标，并且不接受负值。</li>
</ol>
</li>
</ul>
<h3 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h3><p>正则表达式是被用来匹配字符串中的字符组合的模式，被用于RegExp 的exec和test方法以及 String 的 match、replace、search 和 split 方法，用到的地方很多，也不好理解，所以要慢慢消化了。</p>
<ul>
<li><p>创建正则表达式：</p>
<ol>
<li><code>var re = /ab+c/;</code></li>
<li><code>var re = new RegExp(&quot;ab+c&quot;);</code></li>
</ol>
</li>
<li><p>匹配方法：</p>
<ol>
<li>使用简单的模式，如/abc/，只会匹配有字符串”abc”顺序出现的字符串。</li>
<li><p>使用特殊字符</p>
<ul>
<li><p>修饰符</p>
<ol>
<li>i: 不区分大小写匹配</li>
<li>g: 全局匹配</li>
<li>m: 多行匹配</li>
</ol>
</li>
<li><p>方括号(用于匹配某个范围内的字符)</p>
<ol>
<li>[abc]: 匹配方括号之间的任何字符</li>
<li>[^abc]: 匹配不在方括号之间的任何字符</li>
<li>(red|blue|grenn): 匹配任何指定的选项</li>
</ol>
</li>
<li><p>元字符</p>
<ol>
<li>.: 匹配除了换行和结束符以外的其他单个字符</li>
<li>\w: 匹配单词字符(字母、数字、下划线)</li>
<li>\W: 匹配非单词字符</li>
<li>\d: 匹配数字</li>
<li>\D: 匹配非数字</li>
<li>\s: 匹配空白字符</li>
<li>\S: 匹配非空白字符</li>
<li>\b: 匹配单词边界</li>
<li>\B: 匹配非单词边界</li>
</ol>
</li>
<li><p>量词</p>
<ol>
<li>n+: 匹配包含一个或多个字符n的字符串</li>
<li>n*: 匹配包含0个或多个字符n的字符串</li>
<li>n?: 匹配包含0个或一个字符n的字符串</li>
<li>n{X}: 匹配含有X个n的字符串</li>
<li>n{X,Y}: 匹配含有X到Y个n的字符串</li>
<li>n{X,}: 匹配至少X个n的字符串</li>
<li>n$: 匹配以n结尾的字符串</li>
<li>^n: 匹配以n开头的字符串</li>
<li>?=n: 匹配任何其后紧跟指定字符串n的字符串</li>
<li>?!n: 匹配其后没有紧跟指定字符串n的字符串</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
