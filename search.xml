<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CSS 理解优先级、布局和定位]]></title>
      <url>http://babymaychen.github.io/2016/06/14/css/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>CSS</strong>是显示网页的很棒的语言，也是很好学的语言，初学css的人在修改一些样式时，往往显得力不从心，因为自己就经历过，可能明明我改了这个颜色，但是却没生效，或者我想让这个div在页面的中间显示，但是就是不在中间，要不就是不理解float、position等不好理解的属性，下面就开始学习吧。</p>
</blockquote>
<p> <img src="/uploads/css.png" alt="css"></p>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>浏览器是通过判断优先级来决定哪些元素应用哪些样式的，如果优先级相同，浏览器会应用css中靠后声明的。</p>
<ol>
<li><p>优先级顺序(由低到高)</p>
<ul>
<li>通用选择器*</li>
<li>元素(类型)选择器</li>
<li>类选择器</li>
<li>属性选择器</li>
<li>伪类</li>
<li>ID 选择器</li>
<li>内联样式</li>
</ul>
</li>
<li><p>!important(不推荐)</p>
<p>   它的优先级会超越任何地方、任何方式的样式声明，包括行内style属性中声明的样式。不推荐这个用法的原因是，这会导致我们不好调试，找不到哪里给强制了，所以还是推荐使用css的级联属性。</p>
</li>
<li><p>级联属性(推荐)</p>
<p>缩小选择的范围，使你的选择器更有针对性而提高优先级：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;test&quot;&gt; </span><br><span class="line">  &lt;span&gt;Text&lt;/span&gt;     </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">div#test span &#123; color: green &#125;</span><br><span class="line">span &#123; color: red &#125;</span><br><span class="line">div span &#123; color: blue &#125;</span><br></pre></td></tr></table></figure>
<p>无论css语句顺序是怎样的，都会显示绿色，因为只有这条规则范围最小，优先级最高。</p>
</li>
</ol>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>css的布局是很常用也是用不好的一个部分，学好布局，你就离成功很近了。</p>
<ol>
<li><p>display<br>  none：隐藏对象。与visibility的hidden不同，其不保存物理空间。<br>  inline：指定对象为内联元素。(默认值)。<br>  block：指定对象为块元素。<br>  inline-block：指定对象为内联块元素。</p>
<h4 id="内联元素-也叫行内元素"><a href="#内联元素-也叫行内元素" class="headerlink" title="内联元素(也叫行内元素)"></a>内联元素(也叫行内元素)</h4><p>  行内元素不可以设置宽（width）和高（height），但可以与其他行内元素位于同一行，行内元素内一般不可以包含块级元素。行内元素的高度一般由元素内部的字体大小决定，宽度由内容的长度控制，可以有padding和margin，给内联元素设置padding和margin只会影响元素水平方向上的空间，垂直方向上的空间不会发生变化。常见的行内元素有a, em ,strong等。</p>
<h4 id="块元素-也叫块级元素"><a href="#块元素-也叫块级元素" class="headerlink" title="块元素(也叫块级元素)"></a>块元素(也叫块级元素)</h4><p>  块状元素排斥其他元素与其位于同一行，可以设定元素的宽（width）和高（height），块级元素一般是其他元素的容器，可容纳块级元素和行内元素。常见的块级元素有div, p ,h1~h6等。</p>
<h4 id="内联块元素"><a href="#内联块元素" class="headerlink" title="内联块元素"></a>内联块元素</h4><p>  与行内元素类似，但是可以为Inline-block元素设置宽度和高度。给Inline-block元素设置宽度和高度将会影响该元素的水平和垂直方向上的空间。  </p>
</li>
<li><p>float<br>  none：设置对象不浮动。(默认值)<br>  left：设置对象浮在左边。<br>  right：设置对象浮在右边。</p>
<h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>  浮动模型也是一种可视化格式模型，浮动的框可以左右移动（根据float属性值而定），直到它的外边缘碰到包含框或者另一个浮动元素的框的边缘。浮动元素不在文档的普通流中，文档的普通流中的元素表现的就像浮动元素不存在一样。下面是我定义了三个div来举例说明。</p>
<p>  1.默认状态下，float：none</p>
<pre><code>div    {
    width: 30px;
    height: 30px;
    border: 1px solid red;
}
.a {
    background-color: #85b730;
}
.b {
    background-color: #e4bd0a;
}
.c {
    background-color: #de4040;
}

&lt;div class=&quot;a&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;b&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;
</code></pre><p>  <img src="/uploads/float-1.png" alt="float-1"></p>
<p>  2.向右浮动，float:right;<br>  因为绿色的框脱离了文档流，它并不占空间，所以黄色的框可以和它共处一行</p>
<pre><code>.a {
    background-color: #85b730;
    float: right;
}
</code></pre><p>  <img src="/uploads/float-2.png" alt="float-2"></p>
<p>  3.向左浮动，float:left; 因为绿色的框脱离了文档流，它并不占空间，所以挡住了黄色的框</p>
<pre><code>.a {
    background-color: #85b730;
    float: left;
}
</code></pre><p>  <img src="/uploads/float-3.png" alt="float-3"></p>
<p>  4.全部向左浮动，<br>  因为黄色的框碰到了另一个浮动的框（绿色的框），所以停住了，同理红色的框遇到黄色的框</p>
<pre><code>div {
    float: left;
}
</code></pre><p>  <img src="/uploads/float-4.png" alt="float-4"></p>
<p>  5.全部向左浮动，<br>  当浮动框的长度很大，放不下三个框时，第三个框会向下移动</p>
<pre><code>div {
    width: 600px;
    height: 100px;
    float: left;
}
</code></pre><p>  <img src="/uploads/float-5.png" alt="float-5"></p>
<p>  6.全部向左浮动，<br>  绿色框高度变大，挡住了向下的红色框</p>
<pre><code>.a {
    height: 200px;
}

div {
    float: left;
}
</code></pre><p>  <img src="/uploads/float-6.png" alt="float-6"></p>
<p>  注意事项：float在绝对定位和display为none时不生效。</p>
</li>
<li><p>clear<br>  none：允许两边都有浮动对象。(默认值)<br>  left：不允许左边有浮动对象。<br>  right：不允许右边有浮动对象。<br>  both：不允许有浮动对象。</p>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>  该属性的值指出了不允许有浮动对象的边。</p>
<ul>
<li><p>clear: left; 该对象的左边不能挨着浮动对象的边，第二个框会向下移动。<br>  <code>.b { clear: left; }</code><br>  <code>div { float: left; }</code></p>
<p><img src="/uploads/clear-1.png" alt="clear-1"></p>
</li>
</ul>
<ol>
<li><p>clear: right; 该对象的右边不能挨着浮动对象的边。</p>
<p> <code>.b { clear: right; }</code><br> <code>div { float: left; }</code></p>
<p><img src="/uploads/float-4.png" alt="float-4"></p>
<p>这样做之后我们发现，红框文思没动，这不是我们想要的，<strong>一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素</strong>，如果想要让红框下去，我们只能作用在红框身上</p>
<p> <code>.c { clear: left; }</code><br> <code>div { float: left; }</code></p>
<p><img src="/uploads/clear-1.png" alt="clear-1"></p>
</li>
</ol>
</li>
<li><p>overflow</p>
<p>visible：对溢出内容不做处理，内容可能会超出容易。(默认)<br>   hidden：隐藏溢出容易的内容且不出现滚动条。<br>   scroll：隐藏溢出容器的内容，溢出的内容将以滚动条的方式显示。<br>auto：当内容没有溢出时不出现滚动条，当内容溢出容器时出现滚动条。</p>
</li>
</ol>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>允许你对元素进行定位</p>
<p>   1.position</p>
<ul>
<li>static：对象遵循常规流。此时4个定位偏移属性不会被应用。</li>
<li>relative：对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left这4个定位偏移属性进行偏移时不会影响常规流中的任何元素。</li>
<li>absolute：对象脱离常规流，此时偏移属性参照的是离自身最近的定位祖先元素，如果没有定位的祖先元素，则一直回溯到body元素。盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。</li>
<li><p>fixed：与absolute一致，但偏移定位是以窗口为参考。当出现滚动条时，对象不会随着滚动。</p>
<p>注意：<strong>想要在某个父元素里定位absolute的，一定要确认该父元素是否是relative。</strong></p>
<p>例：我们想让b元素在a元素中离左边10个像素，但是当没有给a元素定义position:relative时,b元素没有在a元素中，而是离body左边10个像素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">div	&#123;</span><br><span class="line">	border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">.a &#123;</span><br><span class="line">	width: 60px;</span><br><span class="line">	height: 60px;</span><br><span class="line">	margin: 0 auto;</span><br><span class="line">	background-color: #85b730;</span><br><span class="line">&#125;</span><br><span class="line">.b &#123;</span><br><span class="line">	width: 30px;</span><br><span class="line">	height: 30px;</span><br><span class="line">	position: absolute;</span><br><span class="line">	left: 10px;</span><br><span class="line">	background-color: #e4bd0a;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/uploads/position-1.png" alt="position-1"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript 基础]]></title>
      <url>http://babymaychen.github.io/2016/06/13/javascript/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>JavaScript</strong>是前端工程师必备的技能之一，也是基础中的基础，但是我本人又是个不太重视基础的人，这就导致我在写代码的时候，总会忘记这该怎么写，或者在面试的时候，被问及原理或者基础的语法的时候，总是语塞，而且近几年JavaScript的发展很快，有统治全世界的架势，这也就是为什么我要写这篇文章的原因，让我们一步一步来，坚实的地基才会盖得起高楼大厦。</p>
</blockquote>
<h3 id="JavaScript-介绍"><a href="#JavaScript-介绍" class="headerlink" title="JavaScript 介绍"></a>JavaScript 介绍</h3><p>JavaScript是一种可以用来给网页增加交互性的编程语言，现在也被用于网络服务器（非浏览器环境），如Node.js。<br>JavaScript分为三部分，<strong>ECMAScript</strong>（JavaScript核心语音）、<strong>DOM</strong>（文档对象模型）和<strong>BOM</strong>（浏览器对象模型）。ECMAScript，描述了该语言的语法和基本对象。DOM，描述处理网页内容的方法和接口。BOM，提供了独立于内容而在浏览器窗口之间进行交互的对象和方法。</p>
<p>ECMAScript是由ECMA TC39委员会进行标准化的一门编程语言，规定了 JavaScript 脚本的核心语法，如 数据类型、关键字、保留字、运算符、对象和语句等，它不属于任何浏览器，现在最新版本是<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6.0</a>。</p>
<p>DOM是“ Document Object Model ”的缩写，简称“文本对象模型”，定义了 JavaScript 操作 HTML 文档的接口，提供了访问 HTML 文档（如body、form、div、textarea等）的途径以及操作方法，通过调用DOM树上对象的方法可以操纵这些对象。</p>
<p>BOM 是“ Browser Object Model ”的缩写，简称“ 浏览器对象模型 ”，定义了 JavaScript 操作浏览器的接口，提供了访问某些功能（如浏览器窗口大小、版本信息、浏览历史记录等）的途径以及操作方法。</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul>
<li>变量名必须以字母、$、_开头</li>
<li>定义了的变量没有赋值，会有个默认值undefined</li>
<li>变量可以存储两种类型的值，原始值和引用值</li>
<li>原始值：Undefined、Null，Boolean、Number、String</li>
<li>特殊值：NaN，会发生在类型转换失败时</li>
<li>字符串转换：toString()方法，Number转换时加的参数可以是2、8、10（默认）、16，分别转换成二进制、八进制、十进制、十六进制字符串，数组转换时，会变成用“ , ”连接的字符串，<code>String()</code>与<code>toString()</code>的唯一区别是对 null 和 undefined 值强制类型转换可以生成字符串而不引发错误</li>
<li>数字转换： parseInt()、parseFloat()，转换的是部分数值如：<code>parseFloat(&quot;123end&quot;)</code>结果为123，而<code>Number(&quot;123end&quot;)</code>结果为NaN</li>
<li>Boolean转换：Boolean()，除了空串、null、数字 0、undefined 或 null，它将返回 false，其他都是true</li>
<li>Object对象，所有对象都由这个对象继承，Object对象里的所有属性和方法都会出现在其他的对象中，因此学习Object对象很重要。</li>
</ul>
<h3 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h3><p>Object对象，所有对象都由这个对象继承，Object对象里的所有属性和方法都会出现在其他的对象中，因此学习Object对象很重要。<br>Object对象常见的属性：</p>
<ol>
<li>constructor，指向原始的Object()函数，如<code>var test = new Array(); test.constructor == Array</code> 返回true；</li>
<li>Prototype，它默认返回 Object 对象的一个实例，使您有能力向对象添加属性和方法，如<code>Array.prototype.dd = &quot;33&quot;; var test = new Array(); console.log(test.dd);</code> 结果就是”33”,注意先后顺序；</li>
<li>hasOwnProperty，判断对象是否有某个特定的属性，必须用字符串指定该属性，而且是自身属性，如上记2的例子中，<code>test.hasOwnProperty(&quot;dd&quot;);</code> 返回的是false；</li>
<li>isPrototypeOf，判断该对象是否为另一个对象的原型，如 <code>var test = new Array(); Array.prototype.isPrototypeOf(test)</code> 返回true；</li>
</ol>
<h3 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h3><p>Array 对象用于在单个的变量中存储多个值，也是常用的对象，所以在这里单列出来。</p>
<ul>
<li><p>创建数组的方法：</p>
<ol>
<li><code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</code> （推荐）</li>
<li><code>var arr = new Array(3); arr[0] = &quot;a&quot;; arr[1] = &quot;b&quot;; arr[2] = &quot;c&quot;</code></li>
<li><code>var arr = new Array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</code></li>
</ol>
</li>
<li><p>Array 对象常用方法：</p>
<ol>
<li><strong>concat()</strong>，连接两个或更多的数组，并返回结果。如 <code>var arr1 = [1, 2, 3]; var arr2 = [4, 5]; arr1.concat(arr2);</code> 结果输出是[1,2,3,4,5], 需要注意的是arr1和arr2是不变的；</li>
<li><strong>join()</strong>, 把数组的所有元素放入一个字符串, 元素通过指定的分隔符进行分隔。如 <code>var arr = [1, 2, 3]; arr.join(&quot;.&quot;);</code>返回结果是”1.2.3”；</li>
<li><strong>pop()</strong>, 删除并返回数组的最后一个元素。如 <code>var arr = [1, 2, 3]; arr.pop();</code>返回删除的最后一个元素 3， 注意的是，此时的arr已经没有了最后一个元素，<code>console.log(arr);</code>结果是[1, 2]；</li>
<li><strong>push()</strong>, 可向数组的末尾添加一个或多个元素，并返回新的长度。如 <code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; arr.push(&quot;d&quot;);</code>结果是4, 注意此时的arr已经多了一个元素，<code>console.log(arr);</code>结果是[“a”, “b”, “c”，”d”]；</li>
<li><strong>reverse()</strong>,颠倒数组中元素的顺序。如 <code>var arr = [1, 2, 3]; arr.reverse();</code> 返回的结果是[3, 2, 1], 注意此时的arr已经改变了，<code>console.log(arr);</code>结果是[3, 2, 1]；</li>
<li><strong>shift()</strong>,删除第一个元素，并返回刚才删除的第一个元素的值。如 <code>var arr = [1, 2, 3]; arr.shift();</code> 返回的结果是1, 注意此时的arr已经改变了，<code>console.log(arr);</code>结果是[2, 3]；</li>
<li><strong>slice()</strong>, 从已有的数组中返回选定的元素。有两个参数，start和end，开始和结束的位置，当只有一个参数时，默认end是最后，如 <code>var arr = [1, 2, 3]; arr.slice(1);</code> 返回的是[2, 3], 负值时，从尾部开始计算，如 <code>var arr = [1, 2, 3]; arr.slice(-1);</code> 返回的结果是[3], 注意该方法返回的是字数组，不会改变原来的数组；</li>
<li><strong>splice()</strong>, 从数组中添加/删除项目，然后返回被删除的项目, 该方法有三个参数，index：必须，整数，添加或删除项目的位置，howmany：必须，要删除的项目数量，设置为0时，不会删除，item1,…,item2：可选，向数组添加的新项目，如 <code>var arr =[1, 2, 3]; arr.splice(0, 1);</code> 返回结果是[1],删除了第一个项目，注意此时的arr已经改变了，<code>console.log(arr);</code>结果是[2, 3]，<code>var arr =[1, 2, 3]; arr.splice(2, 0, 4, 5);</code>返回的结果是[], <code>console.log(arr);</code>结果是[1, 2, 4, 5, 3]，此时应该注意的是splice和slice的区别；</li>
</ol>
</li>
</ul>
<h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h3><p>String对象也就是存数字符串的，下面的方法是最常用的也是最容易混淆的。</p>
<ul>
<li><p>String 对象常用方法：</p>
<ol>
<li><strong>charAt()</strong>，返回指定位置的字符。该方法有一个位置参数，如<code>var str = &quot;Hello May&quot;; str.charAt(6);</code>结果是”M”，如果参数不在0和string.length之间，将返回空串；</li>
<li><strong>indexOf()</strong>， 返回指定的字符串在在字符串中首次出现的位置。该方法有俩参数，searchvalue：必须，要检索的字符串，fromindex：可选，开始检索的位置，如果参数不在0和string.length之间，将从头开始检索。如 <code>var str = &quot;Hello May&quot;; str.indexOf(&quot;M&quot;);</code>结果是6，<code>var str = &quot;Hello May&quot;; str.indexOf(&quot;M&quot;, 7);</code>结果是-1，找不到该字符串时，返回结果为-1；</li>
<li><strong>lastIndexOf()</strong>，与indexOf()方法相反，返回最后一个出现的位置；</li>
<li><strong>match()</strong>，在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。参数，必须，可以是要检索的字符串，也可以是要匹配的正则表达式。如 <code>var str = &quot;Hello May&quot;; str.match(&quot;May&quot;);</code> 返回的结果是[“May”], <code>var str = &quot;Hello May&quot;; str.match(/\d+/g);</code>结果就是null；</li>
<li><strong>replace()</strong>, 在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。如 <code>var str = &quot;Hello World&quot;; str.replace(&quot;World&quot;, &quot;May&quot;);</code> 结果返回”Hello May”，注意的是，此时arr没有被改变，<code>console.log(str);</code>结果是”Hello World”；</li>
<li><strong>split()</strong>，把一个字符串分割成字符串数组。该方法有两个参数，separator：必须，要分割的字符串或正则表达式，howmany：可选，指定返回数组的最大长度。如    <code>var str = &quot;How are you?&quot;; str.split(&quot; &quot;, 2);</code> 返回结果是[“How”, “are”]；</li>
<li><strong>substr()</strong>，在字符串中抽取从指定下标开始的指定数目的字符（包括开始下标位置的字符）。该方法有俩参数，start：必须，要抽取的子串下标，可以是负数，-1是最后一个字符，length：可选，子串中的字符数，必须是正整数。如 <code>var str = &quot;Hello World&quot;; str.substr(5);</code>返回的结果是” World”,<code>var str = &quot;Hello World&quot;; str.substr(5, 4);</code>返回结果是” Wor”，找不到的情况下返回空串。</li>
<li><strong>substring()</strong>，提取字符串中介于两个指定下标之间的字符。与substr()不同，两个参数分别为开始和结束的下标，并且不接受负值。</li>
</ol>
</li>
</ul>
<h3 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h3><p>正则表达式是被用来匹配字符串中的字符组合的模式，被用于RegExp 的exec和test方法以及 String 的 match、replace、search 和 split 方法，用到的地方很多，也不好理解，所以要慢慢消化了。</p>
<ul>
<li><p>创建正则表达式：</p>
<ol>
<li><code>var re = /ab+c/;</code></li>
<li><code>var re = new RegExp(&quot;ab+c&quot;);</code></li>
</ol>
</li>
<li><p>匹配方法：</p>
<ol>
<li>使用简单的模式，如/abc/，只会匹配有字符串”abc”顺序出现的字符串。</li>
<li><p>使用特殊字符</p>
<ul>
<li><p>修饰符</p>
<ol>
<li>i: 不区分大小写匹配</li>
<li>g: 全局匹配</li>
<li>m: 多行匹配</li>
</ol>
</li>
<li><p>方括号(用于匹配某个范围内的字符)</p>
<ol>
<li>[abc]: 匹配方括号之间的任何字符</li>
<li>[^abc]: 匹配不在方括号之间的任何字符</li>
<li>(red|blue|grenn): 匹配任何指定的选项</li>
</ol>
</li>
<li><p>元字符</p>
<ol>
<li>.: 匹配除了换行和结束符以外的其他单个字符</li>
<li>\w: 匹配单词字符(字母、数字、下划线)</li>
<li>\W: 匹配非单词字符</li>
<li>\d: 匹配数字</li>
<li>\D: 匹配非数字</li>
<li>\s: 匹配空白字符</li>
<li>\S: 匹配非空白字符</li>
<li>\b: 匹配单词边界</li>
<li>\B: 匹配非单词边界</li>
</ol>
</li>
<li><p>量词</p>
<ol>
<li>n+: 匹配包含一个或多个字符n的字符串</li>
<li>n*: 匹配包含0个或多个字符n的字符串</li>
<li>n?: 匹配包含0个或一个字符n的字符串</li>
<li>n{X}: 匹配含有X个n的字符串</li>
<li>n{X,Y}: 匹配含有X到Y个n的字符串</li>
<li>n{X,}: 匹配至少X个n的字符串</li>
<li>n$: 匹配以n结尾的字符串</li>
<li>^n: 匹配以n开头的字符串</li>
<li>?=n: 匹配任何其后紧跟指定字符串n的字符串</li>
<li>?!n: 匹配其后没有紧跟指定字符串n的字符串</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
